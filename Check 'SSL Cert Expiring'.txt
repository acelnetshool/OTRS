SSL Cert Expiring

1. Save this snippet to /usr/lib64/nagios/plugins/check_ssl_days_to_expire
2. Make sure it has execute permissions (chmod +x /usr/lib64/nagios/plugins/check_ssl_days_to_expire)
3. Adicionar a seguinte linha ao ficheiro /etc/nrpe.d/ok-bundle.cfg command[check_ssl_days_to_expire]=/usr/lib64/nagios/plugins//check_ssl_days_to_expire '$ARG1$' '$ARG2$' '$ARG3$'
4. Restart nrpe systemctl restart nrpe.service

----
#!/usr/bin/env sh

set -e

#############################################################################
# Purpose: Convert a string month into an integer representation
# Arguments:
#   $1 -> Month name (e.g., Sep)
#############################################################################
getmonth()
{
    case ${1} in
        Jan) echo 1 ;;
        Feb) echo 2 ;;
        Mar) echo 3 ;;
        Apr) echo 4 ;;
        May) echo 5 ;;
        Jun) echo 6 ;;
        Jul) echo 7 ;;
        Aug) echo 8 ;;
        Sep) echo 9 ;;
        Oct) echo 10 ;;
        Nov) echo 11 ;;
        Dec) echo 12 ;;
          *) echo 0 ;;
    esac
}

#############################################################################
# Purpose: Convert a date from MONTH-DAY-YEAR to Julian format
# Acknowledgements: Code was adapted from examples in the book
#                   "Shell Scripting Recipes: A Problem-Solution Approach"
#                   ( ISBN 1590594711 )
# Arguments:
#   $1 -> Month (e.g., 06)
#   $2 -> Day   (e.g., 08)
#   $3 -> Year  (e.g., 2006)
#############################################################################
date2julian() {

    if [ "${1}" != "" ] && [ "${2}" != "" ] && [ "${3}" != "" ]; then
        ## Since leap years add aday at the end of February,
        ## calculations are done from 1 March 0000 (a fictional year)
        d2j_tmpmonth=$((12 * $3 + $1 - 3))

        ## If it is not yet March, the year is changed to the previous year
        d2j_tmpyear=$(( d2j_tmpmonth / 12))

        ## The number of days from 1 March 0000 is calculated
        ## and the number of days from 1 Jan. 4713BC is added
        echo $(( (734 * d2j_tmpmonth + 15) / 24
                 - 2 * d2j_tmpyear + d2j_tmpyear/4
                 - d2j_tmpyear/100 + d2j_tmpyear/400 + $2 + 1721119 ))
    else
        echo 0
    fi
}

#############################################################################
# Purpose: Calculate the number of seconds between two dates
# Arguments:
#   $1 -> Date #1
#   $2 -> Date #2
#############################################################################
date_diff()
{
    if [ "${1}" != "" ] && [ "${2}" != "" ]; then
        echo $((${2} - ${1}))
    else
        echo 0
    fi
}

# Location of system binaries
DATE=$(command -v date)
OPENSSL=$(command -v openssl)
PRINTF=$(command -v printf)
SED=$(command -v sed)

### Baseline the dates so we have something to compare to
MONTH=$(${DATE} "+%m")
DAY=$(${DATE} "+%d")
YEAR=$(${DATE} "+%Y")
NOWJULIAN=$(date2julian "${MONTH#0}" "${DAY#0}" "${YEAR}")

CERT_PATH=$1
WARNING=$2
CRITICAL=$3

### Capture certificate end day
EXPIRE_DATE=$("${OPENSSL}" x509 -in $1 -enddate -noout -inform pem | "${SED}" 's/notAfter\=//')
set -- ${EXPIRE_DATE}
MONTH=$(getmonth "${1}")
CERTJULIAN=$(date2julian "${MONTH#0}" "${2#0}" "${4}")
CERTDIFF=$(date_diff "${NOWJULIAN}" "${CERTJULIAN}")

${PRINTF} "%s" "$CERTDIFF"

if (( CERTDIFF < CRITICAL )); then
	exit 2;
fi

if (( CERTDIFF < WARNING )); then
	exit 1;
fi

exit 0;
